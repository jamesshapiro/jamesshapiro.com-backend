{
  "Comment": "A state machine that requires email confirmation from the commenter and site owner before a comment is published.",
  "StartAt": "Challenge Commenter Email",
  "States": {
    "Challenge Commenter Email": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "TimeoutSeconds": 3600,
      "Parameters": {
        "FunctionName": "${ChallengeCommenterEmailFunctionArn}",
        "Payload": {
          "post_id.$": "$.post_id",
          "commenter_email.$": "$.commenter_email",
          "comment_validator_email.$": "$.comment_validator_email",
          "moderator_email.$": "$.moderator_email",
          "comment_text.$": "$.comment_text",
          "token.$": "$$.Task.Token"
        }
      },
      "Next": "Record Comment",
      "ResultPath": "$.taskresult"
    },
    "Record Comment": {
      "Type": "Task",
      "Resource": "${DDBPutItem}",
      "Parameters": {
        "TableName": "${CommentsDDBTable}",
        "Item": {
          "PK1": {
            "S.$": "$.post_id"
          },
          "SK1": {
            "S.$": "$.taskresult.comment_ulid"
          },
          "COMMENT_TEXT": {
            "S.$": "$.comment_text"
          },
          "COMMENTER_EMAIL": {
            "S.$": "$.commenter_email"
          },
          "COMMENTER_APPROVED": {
            "S": "true"
          },
          "MODERATOR_APPROVED": {
            "S": "false"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 20,
          "MaxAttempts": 5,
          "BackoffRate": 10
        }
      ],
      "Next": "Challenge Moderator Email",
      "ResultPath": null
    },
    "Challenge Moderator Email": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "TimeoutSeconds": 604800,
      "Parameters": {
        "FunctionName": "${ChallengeModeratorEmailFunctionArn}",
        "Payload": {
          "post_id.$": "$.post_id",
          "commenter_email.$": "$.commenter_email",
          "comment_validator_email.$": "$.comment_validator_email",
          "moderator_email.$": "$.moderator_email",
          "comment_text.$": "$.comment_text",
          "token.$": "$$.Task.Token"
        }
      },
      "Next": "Approve Comment",
      "ResultPath": null
    },
    "Approve Comment": {
      "Type": "Task",
      "Resource": "${DDBUpdateItem}",
      "Parameters": {
        "TableName": "${CommentsDDBTable}",
        "Key": {
          "PK1": {
            "S.$": "$.post_id"
          },
          "SK1": {
            "S.$": "$.taskresult.comment_ulid"
          }
        },
        "UpdateExpression": "SET #moderator_approved = :true_literal",
        "ExpressionAttributeNames": {
          "#moderator_approved": "MODERATOR_APPROVED"
        },
        "ExpressionAttributeValues": {
          ":true_literal": "true"
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 20,
          "MaxAttempts": 5,
          "BackoffRate": 10
        }
      ],
      "ResultPath": null,
      "Next": "Check Stock Value"
    },
    "Check Stock Value": {
      "Type": "Task",
      "Resource": "${StockCheckerFunctionArn}",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 15,
          "MaxAttempts": 5,
          "BackoffRate": 1.5
        }
      ],
      "Next": "Buy or Sell?"
    },
    "Buy or Sell?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.stock_price",
          "NumericLessThanEquals": 50,
          "Next": "Buy Stock"
        }
      ],
      "Default": "Sell Stock"
    },
    "Sell Stock": {
      "Type": "Task",
      "Resource": "${StockSellerFunctionArn}",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 1
        }
      ],
      "Next": "Record Transaction"
    },
    "Buy Stock": {
      "Type": "Task",
      "Resource": "${StockBuyerFunctionArn}",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 1
        }
      ],
      "Next": "Record Transaction"
    },
    "Record Transaction": {
      "Type": "Task",
      "Resource": "${DDBPutItem}",
      "Parameters": {
        "TableName": "${DDBTable}",
        "Item": {
          "Id": {
            "S.$": "$.id"
          },
          "Type": {
            "S.$": "$.type"
          },
          "Price": {
            "N.$": "$.price"
          },
          "Quantity": {
            "N.$": "$.qty"
          },
          "Timestamp": {
            "S.$": "$.timestamp"
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 20,
          "MaxAttempts": 5,
          "BackoffRate": 10
        }
      ],
      "End": true
    }
  }
}
