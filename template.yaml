AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Resources:
  CommentValidator:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/comment_validator.asl.json
      DefinitionSubstitutions:
        ChallengeEmailFunctionArn: !GetAtt ChallengeEmailFunction.Arn
        GenerateUlidFunctionArn: !GetAtt GenerateUlidFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        CommentsDDBTable: !Ref CommentsDDBTable
      Events:
        CommentApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CommentApi
            Path: /entry-point/
            Method: post
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ChallengeEmailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref GenerateUlidFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsDDBTable

  CommentApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false

  ConfirmCommentApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CommentApi.RootResourceId
      PathPart: success
      RestApiId: !Ref CommentApi

  RejectCommentApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt CommentApi.RootResourceId
      PathPart: failure
      RestApiId: !Ref CommentApi

  ConfirmCommenterApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: production
      RestApiId: !Ref CommentApi
      StageName: production
    DependsOn:
      - ApproveCommentApiMethod
      - RejectCommentApiMethod

  ReviewCommentApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:SendTaskSuccess
                  - states:SendTaskFailure
                Resource: !Ref CommentValidator

  GatewayEmptyModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref CommentApi
      Schema: {}

  # GatewayEmptyModel:
  #   Type: AWS::ApiGateway::Model
  #   Properties:
  #     ContentType: 'application/json'
  #     RestApiId: !Ref CommentApi
  #     Schema:
  #       $schema : 'http://json-schema.org/draft-04/schema#'
  #       title : Response Schema
  #       type : object
  #       properties:
  #         response:
  #           type: string

  ApproveCommentApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      RequestParameters:
        method.request.querystring.token: true
      Integration:
        Type: AWS
        Uri: 'arn:aws:apigateway:us-east-1:states:action/SendTaskSuccess'
        IntegrationHttpMethod: 'POST'
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          'application/json': '{"output": "{\"decision\": \"approve\"}", "taskToken": "$input.params(''token'')"}'
        Credentials: !GetAtt ReviewCommentApiRole.Arn
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {"response": "comment submitted for approval!"}
      RestApiId: !Ref CommentApi
      ResourceId: !Ref ConfirmCommentApiResource
      MethodResponses:
        - ResponseModels:
            'application/json': !Ref GatewayEmptyModel
          StatusCode: '200'

  RejectCommentApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      RequestParameters:
        method.request.querystring.token: true
      Integration:
        Type: AWS
        Uri: 'arn:aws:apigateway:us-east-1:states:action/SendTaskFailure'
        IntegrationHttpMethod: 'POST'
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          'application/json': '{"error": "rejected", "cause": "comment was rejected by commenter or moderator", "taskToken": "$input.params(''token'')"}'
        Credentials: !GetAtt ReviewCommentApiRole.Arn
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                {"response": "comment rejected"}
      RestApiId: !Ref CommentApi
      ResourceId: !Ref RejectCommentApiResource
      MethodResponses:
        - ResponseModels:
            'application/json': !Ref GatewayEmptyModel
          StatusCode: '200'

  ChallengeEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/challenge_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Policies:
        # TODO: parameterize
        - DynamoDBWritePolicy:
            TableName: !Ref CommentsDDBTable
        - SESCrudPolicy:
            IdentityName: 'jamesshapirocomments+athens@gmail.com'

  GenerateUlidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/generate_ulid/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30

  CommentsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'PK1'
          AttributeType: 'S'
        - AttributeName: 'SK1'
          AttributeType: 'S'
        - AttributeName: 'GSI1PK'
          AttributeType: 'S'
        - AttributeName: 'GSI1SK'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'PK1'
          KeyType: 'HASH'
        - AttributeName: 'SK1'
          KeyType: 'RANGE'
      GlobalSecondaryIndexes:
        - IndexName: 'GSI1'
          KeySchema:
            - AttributeName: 'GSI1PK'
              KeyType: 'HASH'
            - AttributeName: 'GSI1SK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'ALL'

  #######################################################
  ##### Start of Custom functions #####
  #######################################################
  ValueFuncExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:UpdateFunctionConfiguration
                Resource:
                  - !GetAtt ChallengeEmailFunction.Arn

  ValueFunc:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          import sys
          def lambda_handler(event, context):
            responseData = {}
            try:
              response_code = 200
              lambda_client = boto3.client('lambda')
              response = lambda_client.update_function_configuration(
                FunctionName=os.environ['CHALLENGE_EMAIL_FUNCTION_NAME'],
                Environment={
                  'Variables': {
                      'APPROVE_COMMENT_ENDPOINT': os.environ['APPROVE_COMMENT_ENDPOINT'],
                      'REJECT_COMMENT_ENDPOINT': os.environ['REJECT_COMMENT_ENDPOINT']
                  }
                }
              )
              print(f'{response=}')
              responseData['Data'] = 'SUCCESS4'
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID", noEcho=True)
            except:
              responseData['Data'] = 'FAILURE'
              e = sys.exc_info()[0]
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID" )
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ValueFuncExecutionRole}'
      Environment:
        Variables:
          APPROVE_COMMENT_ENDPOINT: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/production/success/'
          REJECT_COMMENT_ENDPOINT: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/production/failure/'
          CHALLENGE_EMAIL_FUNCTION_NAME: !Ref ChallengeEmailFunction
  GetLambdaFunctionWasUpdatedValue:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt ValueFunc.Arn
      ChallengeEmailFunction: !Ref ChallengeEmailFunction
      ApproveCommentApiMethod: !Ref ApproveCommentApiMethod
      RejectCommentApiMethod: !Ref RejectCommentApiMethod

Outputs:
  EntryPointApiEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage for Comment Approval Workflow operations'
    Value: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/production/entry-point/'
  LambdaFunctionUpdatedValue:
    Description: 'Was the Lambda Function updated?'
    Value: !GetAtt GetLambdaFunctionWasUpdatedValue.Data
