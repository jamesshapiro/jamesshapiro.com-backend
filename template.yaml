AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

Resources:
  CommentValidator:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/comment_validator.asl.json
      DefinitionSubstitutions:
        StockCheckerFunctionArn: !GetAtt StockCheckerFunction.Arn
        StockSellerFunctionArn: !GetAtt StockSellerFunction.Arn
        StockBuyerFunctionArn: !GetAtt StockBuyerFunction.Arn
        ChallengeCommenterEmailFunctionArn: !GetAtt ChallengeCommenterEmailFunction.Arn
        ChallengeModeratorEmailFunctionArn: !GetAtt ChallengeModeratorEmailFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBTable: !Ref TransactionTable
        CommentsDDBTable: !Ref CommentsDDBTable
      Events:
        CommentAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CommentApi
            Path: /commenter-confirmation/
            Method: post
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref StockCheckerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockSellerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockBuyerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ChallengeCommenterEmailFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ChallengeModeratorEmailFunction
        - DynamoDBWritePolicy:
            TableName: !Ref TransactionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsDDBTable

  CommentApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false

  StockCheckerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_checker/
      Handler: app.lambda_handler
      Runtime: python3.9

  ChallengeCommenterEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/challenge_commenter_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Policies:
        # TODO: parameterize
        - DynamoDBWritePolicy:
            TableName: !Ref CommentsDDBTable
        - SESCrudPolicy:
            IdentityName: 'jamesshapirocomments+athens@gmail.com'

  ConfirmCommenterEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/confirm_commenter_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt ConfirmEmailRole.Arn
      Events:
        CommentAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CommentApi
            Path: /commenter-confirmation/
            Method: get

  ChallengeModeratorEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/challenge_moderator_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Policies:
        # TODO: parameterize
        - SESCrudPolicy:
            IdentityName: 'jamesshapirocomments+athens@gmail.com'

  ConfirmModeratorEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/confirm_moderator_email/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt ConfirmEmailRole.Arn
      Events:
        CommentAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref CommentApi
            Path: /moderator-confirmation/
            Method: get

  ConfirmEmailRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:SendTaskSuccess
                  - states:SendTaskFailure
                Resource: !Ref CommentValidator

  # SubmitCommentFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/submit_comment/
  #     Handler: app.lambda_handler
  #     Runtime: python3.9
  #     Timeout: 30
  #     Policies:
  #       - StepFunctionsExecutionPolicy:
  #           StateMachineName: !GetAtt CommentValidator.Name
  #     Environment:
  #       Variables:
  #         STATE_MACHINE_ARN: !Ref CommentValidator
  #     Events:
  #       CommentAPIEvent:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref CommentApi
  #           Path: /comments/
  #           Method: post

  StockSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_seller/
      Handler: app.lambda_handler
      Runtime: python3.9

  StockBuyerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stock_buyer/
      Handler: app.lambda_handler
      Runtime: python3.9

  TransactionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  CommentsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'PK1'
          AttributeType: 'S'
        - AttributeName: 'SK1'
          AttributeType: 'S'
        - AttributeName: 'GSI1PK'
          AttributeType: 'S'
        - AttributeName: 'GSI1SK'
          AttributeType: 'S'
      BillingMode: 'PAY_PER_REQUEST'
      KeySchema:
        - AttributeName: 'PK1'
          KeyType: 'HASH'
        - AttributeName: 'SK1'
          KeyType: 'RANGE'
      GlobalSecondaryIndexes:
        - IndexName: 'GSI1'
          KeySchema:
            - AttributeName: 'GSI1PK'
              KeyType: 'HASH'
            - AttributeName: 'GSI1SK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'ALL'

  #######################################################
  ##### Start of Custom functions #####
  #######################################################
  ValueFuncExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:UpdateFunctionConfiguration
                Resource:
                  - !GetAtt ChallengeCommenterEmailFunction.Arn
                  - !GetAtt ChallengeModeratorEmailFunction.Arn

  ValueFunc:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          def lambda_handler(event, context):
            responseData = {}
            try:
              response_code = 200
              lambda_client = boto3.client('lambda')
              confirm_commenter_endpoint = os.environ['CONFIRM_COMMENTER_ENDPOINT']
              confirm_moderator_endpoint = os.environ['CONFIRM_MODERATOR_ENDPOINT']
              confirm_commenter_function_name = os.environ['CONFIRM_COMMENTER_FUNCTION_NAME']
              confirm_moderator_function_name = os.environ['CONFIRM_MODERATOR_FUNCTION_NAME']
              endpoints = [confirm_commenter_endpoint, confirm_moderator_endpoint]
              function_names = [confirm_commenter_function_name, confirm_moderator_function_name]
              for endpoint, function_name in zip(endpoints, function_names):
                print(endpoint, function_name)
                response = lambda_client.update_function_configuration(
                  FunctionName=function_name,
                  Environment={
                    'Variables': {
                        'CONFIRMATION_ENDPOINT': endpoint
                    }
                  }
                )
              responseData['Data'] = 'SUCCESS2'
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID", noEcho=True)
            except:
              responseData['Data'] = 'FAILURE'
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID" )
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ValueFuncExecutionRole}'
      Environment:
        Variables:
          # TODO: replace with outputs
          CONFIRM_COMMENTER_ENDPOINT: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/commenter-confirmation/'
          CONFIRM_MODERATOR_ENDPOINT: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/moderator-confirmation/'
          CONFIRM_COMMENTER_FUNCTION_NAME: !Ref ChallengeCommenterEmailFunction
          CONFIRM_MODERATOR_FUNCTION_NAME: !Ref ChallengeModeratorEmailFunction
  GetLambdaFunctionWasUpdatedValue:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt ValueFunc.Arn
      ChallengeCommenterEmailFunction: !Ref ChallengeCommenterEmailFunction
      ConfirmCommenterEmailFunction: !Ref ConfirmCommenterEmailFunction
      ChallengeModeratorEmailFunction: !Ref ChallengeModeratorEmailFunction
      ConfirmModeratorEmailFunction: !Ref ConfirmModeratorEmailFunction

Outputs:
  CommentValidatorArn:
    Description: 'Stock Trading State machine ARN'
    Value: !Ref CommentValidator
  CommentValidatorRoleArn:
    Description: 'IAM Role created for Stock Trading State machine based on the specified SAM Policy Templates'
    Value: !GetAtt CommentValidatorRole.Arn
  ConfirmCommenterApiEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage for Comment Approval Workflow operations'
    Value: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/commenter-confirmation/'
  ConfirmModeratorApiEndpoint:
    Description: 'API Gateway endpoint URL for Prod stage for Comment Approval Workflow operations'
    Value: !Sub 'https://${CommentApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/moderator-confirmation/'
  LambdaFunctionUpdatedValue:
    Description: 'Was the Lambda Function updated?'
    Value: !GetAtt GetLambdaFunctionWasUpdatedValue.Data
